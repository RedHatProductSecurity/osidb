from rest_framework import serializers

from apps.exploits.models import EPSS, Exploit
from osidb.models import PsModule
from osidb.models.affect import Affect
from osidb.models.flaw.flaw import Flaw
from osidb.models.tracker import Tracker


class ExploitsSimpleSerializer(serializers.ModelSerializer):
    class Meta:
        model = Exploit
        fields = ["date", "source", "reference"]


class AffectExploitReportSerializer(serializers.ModelSerializer):
    cve = serializers.CharField(source="flaw.cve_id")
    product = serializers.CharField(source="ps_module")
    component = serializers.CharField(source="ps_component")
    resolution = serializers.CharField(source="resolution_expanded")

    class Meta:
        model = Affect
        fields = ["cve", "product", "component", "affectedness", "resolution"]


class TrackerReportDataSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tracker
        extra_kwargs = {"external_system_id": {"required": True}}
        fields = ["type", "external_system_id", "status", "resolution"]


class AffectReportDataSerializer(serializers.ModelSerializer):
    trackers = TrackerReportDataSerializer(many=True, required=False)

    class Meta:
        model = Affect
        fields = ["ps_module", "ps_component", "affectedness", "resolution", "trackers"]


class FlawReportDataSerializer(serializers.ModelSerializer):
    affects = AffectReportDataSerializer(many=True, required=False)

    class Meta:
        model = Flaw
        fields = ["cve_id", "affects"]


class ExploitOnlyReportDataSerializer(serializers.ModelSerializer):
    flaw = serializers.BooleanField(source="flaw_exists")

    class Meta:
        model = Exploit
        fields = ["cve", "date", "source", "reference", "maturity_preliminary", "flaw"]


class EPSSSerializer(serializers.ModelSerializer):
    class Meta:
        model = EPSS
        fields = ["cve", "epss"]


class SupportedProductsSerializer(serializers.ModelSerializer):
    class Meta:
        model = PsModule
        fields = ["name"]
