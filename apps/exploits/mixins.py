from django.db import models

from apps.exploits.constants import (
    INCLUSION_LIST_PRODUCTS,
    NOT_INCLUSION_LIST_COMPONENTS,
)


class AffectExploitExtensionMixin(models.Model):
    """
    Extends Affect model with a behavior only needed by exploit functionality and reports.
    """

    class Meta:
        abstract = True

    @property
    def resolution_expanded(self):
        """
        For purposes of exploit reports, any DELEGATED resolution needs to be expanded to signify
        state of the tracker in a human-readable form.
        """
        from osidb.models import Affect

        delegated = Affect.AffectResolution.DELEGATED
        if self.resolution == delegated:
            if (
                self.tracker
                and self.tracker.resolution != ""
                and self.tracker.resolution is not None
            ):
                return delegated + "-" + self.tracker.resolution
            else:
                return delegated + "-None"
        else:
            return self.resolution

    @property
    def impact_expanded(self):
        """
        For purposes of exploit reports, impact needs to be expanded, so it signifies either affect
        impact, if it exists, or associated flaw impact otherwise.
        """
        from osidb.models import Impact

        if self.impact == Impact.NOVALUE:
            return self.flaw.impact
        else:
            return self.impact

    @property
    def should_be_excluded(self):
        """
        Any long-term products should have components not on inclusion list removed from any
        exploit related reports.

        Unfortunately, using inclusion list https://access.redhat.com/node/4082531 is not feasible,
        as source RPM / component names are not noted and not trivial to find automatically.
        For that reason static lists of products and components to exclude as we find them was
        created.
        """
        return (
            self.ps_module in INCLUSION_LIST_PRODUCTS
            and self.ps_component in NOT_INCLUSION_LIST_COMPONENTS
        )
