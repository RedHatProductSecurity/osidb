import json

import pytest

from apps.exploits.helpers import store_or_update_exploits
from osidb.dmodels.affect import Affect
from osidb.dmodels.tracker import Tracker
from osidb.tests.factories import (
    AffectFactory,
    FlawFactory,
    PsModuleFactory,
    PsUpdateStreamFactory,
    TrackerFactory,
)

pytestmark = pytest.mark.unit


CISA_TEST_FILE = "apps/exploits/tests/files/CISA/api_test.json"
EPSS_TEST_FILE = "apps/exploits/tests/files/EPSS/epss_scores-test.csv.gz"


@pytest.fixture(autouse=True)
def load_data():
    # Import inside test to avoid using database before
    # enable_db_access_for_all_tests fixture is ready
    from collectors.epss.tasks import process_and_store
    from collectors.exploits_cisa.tasks import process_data

    f1 = FlawFactory(
        cve_id="CVE-2222-0001",
    )
    f2 = FlawFactory(
        cve_id="CVE-2222-0002",
    )
    f3 = FlawFactory(
        cve_id="CVE-2222-0003",
    )
    f4 = FlawFactory(
        cve_id="CVE-2222-0004",
    )
    FlawFactory(
        cve_id="CVE-2222-0005",
    )
    # Flaw with no associated exploit
    FlawFactory(
        cve_id="CVE-2222-9999",
    )

    a1 = AffectFactory(
        resolution=Affect.AffectResolution.DELEGATED,
        affectedness=Affect.AffectAffectedness.AFFECTED,
        flaw=f1,
        ps_module="ps-module-1",
        ps_component="ps-component-1",
    )
    AffectFactory(
        resolution=Affect.AffectResolution.WONTFIX,
        affectedness=Affect.AffectAffectedness.AFFECTED,
        flaw=f2,
        ps_module="ps-module-2",
        ps_component="ps-component-2",
    )
    AffectFactory(
        resolution=Affect.AffectResolution.WONTFIX,
        affectedness=Affect.AffectAffectedness.AFFECTED,
        flaw=f3,
        ps_module="rhel-6",
        ps_component="firefox",
    )
    AffectFactory(
        resolution=Affect.AffectResolution.WONTFIX,
        affectedness=Affect.AffectAffectedness.AFFECTED,
        flaw=f4,
        ps_module="rhel-5",
        ps_component="kernel",
    )

    # Affect with tracker
    t1 = TrackerFactory.build(
        type=Tracker.TrackerType.BUGZILLA,
        external_system_id="12345678",
        status="CLOSED",
        resolution="ERRATA",
    )
    # creating tracker without an affect causes
    # validation error but we ignore it here
    t1.save(raise_validation_error=False)

    a1.trackers.add(t1)

    with open(CISA_TEST_FILE) as f:
        objects = process_data(json.load(f))
    store_or_update_exploits(objects)

    process_and_store(EPSS_TEST_FILE)


class TestAPI(object):
    def test_exploits_status(self, client):
        response = client.get("/exploits/api/v1/status")
        body = response.json()
        assert response.status_code == 200
        assert body["exploits_count"] == 6
        assert body["exploits_count_relevant"] == 5
        assert body["last_exploit"] == "2222-01-06"

    def test_exploits_cve_map(self, auth_client):
        response = auth_client().get("/exploits/api/v1/cve_map")
        body = response.json()
        assert response.status_code == 200
        assert body["results"] == {
            "cves": {
                "CVE-2222-0001": [
                    {
                        "date": "2222-01-01",
                        "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                        "source": "CISA",
                    }
                ],
                "CVE-2222-0002": [
                    {
                        "date": "2222-01-02",
                        "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                        "source": "CISA",
                    }
                ],
                "CVE-2222-0003": [
                    {
                        "date": "2222-01-03",
                        "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                        "source": "CISA",
                    }
                ],
                "CVE-2222-0004": [
                    {
                        "date": "2222-01-04",
                        "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                        "source": "CISA",
                    }
                ],
                "CVE-2222-0005": [
                    {
                        "date": "2222-01-05",
                        "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                        "source": "CISA",
                    }
                ],
            },
            "page_size": 5,
        }

    def test_exploits_report_date(self, auth_client):
        response = auth_client().get("/exploits/api/v1/report/date/11-1-2222")
        body = response.json()
        assert response.status_code == 400
        assert body["detail"] == "Invalid date."

        response = auth_client().get("/exploits/api/v1/report/date/2222-01-01")
        body = response.json()
        assert response.status_code == 200
        assert body["evaluated_cves"] == 6
        assert body["cutoff_date"] == "2222-01-01"
        assert len(body["action_required"]) == 1
        assert len(body["no_action"]) == 4
        assert len(body["not_relevant"]) == 1

        response = auth_client().get("/exploits/api/v1/report/date/2222-01-02")
        body = response.json()
        assert response.status_code == 200
        assert body["evaluated_cves"] == 5
        assert body["cutoff_date"] == "2222-01-02"
        assert len(body["action_required"]) == 1
        assert len(body["no_action"]) == 3
        assert len(body["not_relevant"]) == 1

        response = auth_client().get("/exploits/api/v1/report/date/2222-01-03")
        body = response.json()
        assert response.status_code == 200
        assert body["evaluated_cves"] == 4
        assert body["cutoff_date"] == "2222-01-03"
        assert len(body["action_required"]) == 0
        assert len(body["no_action"]) == 3
        assert len(body["not_relevant"]) == 1

        response = auth_client().get("/exploits/api/v1/report/date/2222-01-10")
        body = response.json()
        assert response.status_code == 200
        assert body["evaluated_cves"] == 0
        assert body["cutoff_date"] == "2222-01-10"
        assert len(body["action_required"]) == 0
        assert len(body["no_action"]) == 0
        assert len(body["not_relevant"]) == 0

    def test_exploits_report_pending(self, auth_client):
        response = auth_client().get("/exploits/api/v1/report/pending")
        body = response.json()
        assert response.status_code == 200
        assert len(body["pending_actions"]) == 1
        assert body["pending_actions_count"] == 1

    def test_exploits_report_explanations(self, auth_client):
        response = auth_client().get("/exploits/api/v1/report/explanations")
        body = response.json()
        assert response.status_code == 200
        assert body["results"] == {
            "explanations": [
                {
                    "cve": "CVE-2222-0001",
                    "explanation": "All affected components for supported "
                    'products are marked as "fix" '
                    "(ps-module-1:ps-component-1)",
                },
                {"cve": "CVE-2222-0002", "explanation": ">> ACTION PENDING <<"},
                {
                    "cve": "CVE-2222-0003",
                    "explanation": "All affected unfixed components for "
                    "supported products are not on inclusion "
                    "list (rhel-6:firefox)",
                },
                {
                    "cve": "CVE-2222-0004",
                    "explanation": "No supported products (rhel-5)",
                },
                {"cve": "CVE-2222-0005", "explanation": "No products in database"},
            ],
            "page_size": 5,
        }

    def test_epss(self, auth_client):
        response = auth_client().get("/exploits/api/v1/epss")
        body = response.json()
        assert response.status_code == 200
        assert body["results"] == [
            {"cve": "CVE-2222-0001", "epss": 0.2224},
            {"cve": "CVE-2222-0002", "epss": 0.9511},
        ]

    def test_supported_products(self, auth_client):
        # Supported products have non-empty active_to_ps_module
        ps_module = PsModuleFactory(name="ps-module")
        PsUpdateStreamFactory(active_to_ps_module=ps_module)

        response = auth_client().get("/exploits/api/v1/supported-products")
        body = response.json()
        assert response.status_code == 200
        assert {"name": "ps-module"} in body["results"]

    def test_unsupported_products(self, auth_client):
        # Unsupported products have no active_to_ps_module
        PsModuleFactory(name="ps-module")

        response = auth_client().get("/exploits/api/v1/supported-products")
        body = response.json()
        assert response.status_code == 200
        assert {"name": "ps-module"} not in body["results"]

    def test_exploits_report_data(self, auth_client):
        response = auth_client().get("/exploits/api/v1/report_data")
        assert response.status_code == 200
        body = response.json()
        assert body["results"] == [
            {
                "cve": "CVE-2222-0001",
                "date": "2222-01-01",
                "source": "CISA",
                "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                "maturity_preliminary": 3,
                "flaw": True,
            },
            {
                "cve": "CVE-2222-0002",
                "date": "2222-01-02",
                "source": "CISA",
                "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                "maturity_preliminary": 3,
                "flaw": True,
            },
            {
                "cve": "CVE-2222-0003",
                "date": "2222-01-03",
                "source": "CISA",
                "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                "maturity_preliminary": 3,
                "flaw": True,
            },
            {
                "cve": "CVE-2222-0004",
                "date": "2222-01-04",
                "source": "CISA",
                "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                "maturity_preliminary": 3,
                "flaw": True,
            },
            {
                "cve": "CVE-2222-0005",
                "date": "2222-01-05",
                "source": "CISA",
                "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                "maturity_preliminary": 3,
                "flaw": True,
            },
            {
                "cve": "CVE-2222-0006",
                "date": "2222-01-06",
                "source": "CISA",
                "reference": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                "maturity_preliminary": 3,
                "flaw": False,
            },
        ]

    def test_exploits_flaw_data(self, auth_client):
        response = auth_client().get("/exploits/api/v1/flaw_data")
        assert response.status_code == 200
        body = response.json()
        assert body["count"] == 5
        assert body["results"] == [
            {
                "cve_id": "CVE-2222-0001",
                "affects": [
                    {
                        "ps_module": "ps-module-1",
                        "ps_component": "ps-component-1",
                        "affectedness": "AFFECTED",
                        "resolution": "DELEGATED",
                        "trackers": [
                            {
                                "type": "BUGZILLA",
                                "external_system_id": "12345678",
                                "status": "CLOSED",
                                "resolution": "ERRATA",
                            },
                        ],
                    },
                ],
            },
            {
                "cve_id": "CVE-2222-0002",
                "affects": [
                    {
                        "ps_module": "ps-module-2",
                        "ps_component": "ps-component-2",
                        "affectedness": "AFFECTED",
                        "resolution": "WONTFIX",
                        "trackers": [],
                    }
                ],
            },
            {
                "cve_id": "CVE-2222-0003",
                "affects": [
                    {
                        "ps_module": "rhel-6",
                        "ps_component": "firefox",
                        "affectedness": "AFFECTED",
                        "resolution": "WONTFIX",
                        "trackers": [],
                    }
                ],
            },
            {
                "cve_id": "CVE-2222-0004",
                "affects": [
                    {
                        "ps_module": "rhel-5",
                        "ps_component": "kernel",
                        "affectedness": "AFFECTED",
                        "resolution": "WONTFIX",
                        "trackers": [],
                    }
                ],
            },
            {
                "cve_id": "CVE-2222-0005",
                "affects": [],
            },
        ]
