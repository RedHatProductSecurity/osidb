import json

import pytest

from apps.exploits.helpers import store_or_update_exploits
from osidb.models import Affect
from osidb.tests.factories import AffectFactory, FlawFactory

pytestmark = pytest.mark.unit


CISA_TEST_FILE = "apps/exploits/tests/files/CISA/api_test.json"
EPSS_TEST_FILE = "apps/exploits/tests/files/EPSS/epss_scores-test.csv.gz"


@pytest.fixture(autouse=True)
def load_data():
    # Import inside test to avoid using database before
    # enable_db_access_for_all_tests fixture is ready
    from collectors.epss.tasks import process_data as process_data_epss
    from collectors.epss.tasks import store_objects
    from collectors.exploits_cisa.tasks import process_data

    f1 = FlawFactory(cve_id="CVE-2222-0001")
    f2 = FlawFactory(cve_id="CVE-2222-0002")
    f3 = FlawFactory(cve_id="CVE-2222-0003")
    f4 = FlawFactory(cve_id="CVE-2222-0004")
    FlawFactory(cve_id="CVE-2222-0005")
    AffectFactory(
        resolution=Affect.AffectResolution.FIX,
        affectedness=Affect.AffectAffectedness.AFFECTED,
        flaw=f1,
        ps_module="ps-module-1",
        ps_component="ps-component-1",
    )
    AffectFactory(
        resolution=Affect.AffectResolution.WONTFIX,
        affectedness=Affect.AffectAffectedness.AFFECTED,
        flaw=f2,
    )
    AffectFactory(
        resolution=Affect.AffectResolution.WONTFIX,
        affectedness=Affect.AffectAffectedness.AFFECTED,
        flaw=f3,
        ps_module="rhel-6",
        ps_component="firefox",
    )
    AffectFactory(
        resolution=Affect.AffectResolution.WONTFIX,
        affectedness=Affect.AffectAffectedness.AFFECTED,
        flaw=f4,
        ps_module="rhel-5",
        ps_component="kernel",
    )

    with open(CISA_TEST_FILE) as f:
        objects = process_data(json.load(f))
    store_or_update_exploits(objects)

    objects = process_data_epss(EPSS_TEST_FILE)
    store_objects(objects)


class TestAPI(object):
    def test_exploits_status(self, client):
        response = client.get("/exploits/api/v1/status")
        body = response.json()
        assert response.status_code == 200
        assert body["exploits_count"] == 6
        assert body["exploits_count_relevant"] == 5
        assert body["last_exploit"] == "2222-01-06"

    def test_exploits_cve_map(self, auth_client):
        response = auth_client.get("/exploits/api/v1/cve_map")
        body = response.json()
        assert response.status_code == 200
        assert body["results"] == {
            "cves": {
                "CVE-2222-0001": [
                    {"date": "2222-01-01", "reference": "N/A", "source": "CISA"}
                ],
                "CVE-2222-0002": [
                    {"date": "2222-01-02", "reference": "N/A", "source": "CISA"}
                ],
                "CVE-2222-0003": [
                    {"date": "2222-01-03", "reference": "N/A", "source": "CISA"}
                ],
                "CVE-2222-0004": [
                    {"date": "2222-01-04", "reference": "N/A", "source": "CISA"}
                ],
                "CVE-2222-0005": [
                    {"date": "2222-01-05", "reference": "N/A", "source": "CISA"}
                ],
            },
            "page_size": 5,
        }

    def test_exploits_report_date(self, auth_client):
        response = auth_client.get("/exploits/api/v1/report/date/11-1-2222")
        body = response.json()
        assert response.status_code == 400
        assert body["detail"] == "Invalid date."

        response = auth_client.get("/exploits/api/v1/report/date/2222-01-01")
        body = response.json()
        assert response.status_code == 200
        assert body["evaluated_cves"] == 6
        assert body["cutoff_date"] == "2222-01-01"
        assert len(body["action_required"]) == 1
        assert len(body["no_action"]) == 4
        assert len(body["not_relevant"]) == 1

        response = auth_client.get("/exploits/api/v1/report/date/2222-01-02")
        body = response.json()
        assert response.status_code == 200
        assert body["evaluated_cves"] == 5
        assert body["cutoff_date"] == "2222-01-02"
        assert len(body["action_required"]) == 1
        assert len(body["no_action"]) == 3
        assert len(body["not_relevant"]) == 1

        response = auth_client.get("/exploits/api/v1/report/date/2222-01-03")
        body = response.json()
        assert response.status_code == 200
        assert body["evaluated_cves"] == 4
        assert body["cutoff_date"] == "2222-01-03"
        assert len(body["action_required"]) == 0
        assert len(body["no_action"]) == 3
        assert len(body["not_relevant"]) == 1

        response = auth_client.get("/exploits/api/v1/report/date/2222-01-10")
        body = response.json()
        assert response.status_code == 200
        assert body["evaluated_cves"] == 0
        assert body["cutoff_date"] == "2222-01-10"
        assert len(body["action_required"]) == 0
        assert len(body["no_action"]) == 0
        assert len(body["not_relevant"]) == 0

    def test_exploits_report_pending(self, auth_client):
        response = auth_client.get("/exploits/api/v1/report/pending")
        body = response.json()
        assert response.status_code == 200
        assert len(body["pending_actions"]) == 1
        assert body["pending_actions_count"] == 1

    def test_exploits_report_explanations(self, auth_client):
        response = auth_client.get("/exploits/api/v1/report/explanations")
        body = response.json()
        assert response.status_code == 200
        assert body["results"] == {
            "explanations": [
                {
                    "cve": "CVE-2222-0001",
                    "explanation": "All affected components for supported "
                    'products are marked as "fix" '
                    "(ps-module-1:ps-component-1)",
                },
                {"cve": "CVE-2222-0002", "explanation": ">> ACTION PENDING <<"},
                {
                    "cve": "CVE-2222-0003",
                    "explanation": "All affected unfixed components for "
                    "supported products are not on inclusion "
                    "list (rhel-6:firefox)",
                },
                {
                    "cve": "CVE-2222-0004",
                    "explanation": "No supported products (rhel-5)",
                },
                {"cve": "CVE-2222-0005", "explanation": "No products in database"},
            ],
            "page_size": 5,
        }

    def test_epss(self, auth_client):
        response = auth_client.get("/exploits/api/v1/epss")
        body = response.json()
        assert response.status_code == 200
        assert body["results"] == [
            {"cve": "CVE-2222-0001", "epss": 0.2224},
            {"cve": "CVE-2222-0002", "epss": 0.9511},
        ]
