"""
CISA exploit data collector
"""
import logging

import requests
from django.conf import settings
from django.utils import timezone
from django.utils.dateparse import parse_date

from apps.exploits.helpers import (
    set_exploit_collector_acls,
    store_or_update_exploits,
    update_objects_with_flaws,
)
from apps.exploits.models import Exploit
from collectors.framework.models import collector

logger = logging.getLogger(__name__)

CISA_URL = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"


def download():
    response = requests.get(CISA_URL)
    exploit_data = response.json()
    return exploit_data


def process_data(exploit_data):
    exploit_objects = []

    for exploit in exploit_data["vulnerabilities"]:
        cve = exploit["cveID"]
        date = parse_date(exploit["dateAdded"])
        e = Exploit(
            cve=cve,
            source=Exploit.ExploitSource.CISA,
            flaw=None,  # Preliminary set to None, make links later
            date=date,
            reference="N/A",  # CISA does not provide exploit link or evidence
            # CISA claims that the exploit is used in the wild
            maturity_preliminary=Exploit.ExploitMaturity.H,
        )
        exploit_objects.append(e)

    update_objects_with_flaws(exploit_objects)  # Make links to flaws if they exist
    return exploit_objects


def cisa_collector_main():
    set_exploit_collector_acls()
    data = download()
    objects = process_data(data)
    store_or_update_exploits(objects)


@collector(
    # Execute once an hour in production or stage, otherwise daily
    crontab=settings.CISA_COLLECTOR_CRONTAB
)
def exploit_cisa_collector(collector_obj):
    logger.info(f"Collector {collector_obj.name} is running")

    cisa_collector_main()

    # Save time when the collector ran for the last time
    collector_obj.store(updated_until_dt=timezone.now())

    return f"The {collector_obj.name} finished successfully."
