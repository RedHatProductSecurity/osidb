# Generated by Django 4.2.17 on 2025-02-20 13:09

from django.db import migrations, models
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ("osidb", "0183_modify_not_affected_justification_values"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="tracker",
            name="insert_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="tracker",
            name="update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="tracker",
            name="delete_delete",
        ),
        migrations.AddField(
            model_name="tracker",
            name="not_affected_justification",
            field=models.CharField(
                blank=True,
                choices=[
                    ("", "Novalue"),
                    ("Component not Present", "Component Not Present"),
                    (
                        "Inline Mitigations already Exist",
                        "Inline Mitigations Already Exist",
                    ),
                    (
                        "Vulnerable Code cannot be Controlled by Adversary",
                        "Vuln Code Cannot Be Controlled",
                    ),
                    (
                        "Vulnerable Code not in Execute Path",
                        "Vuln Code Not In Execute Path",
                    ),
                    ("Vulnerable Code not Present", "Vuln Code Not Present"),
                ],
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="trackeraudit",
            name="not_affected_justification",
            field=models.CharField(
                blank=True,
                choices=[
                    ("", "Novalue"),
                    ("Component not Present", "Component Not Present"),
                    (
                        "Inline Mitigations already Exist",
                        "Inline Mitigations Already Exist",
                    ),
                    (
                        "Vulnerable Code cannot be Controlled by Adversary",
                        "Vuln Code Cannot Be Controlled",
                    ),
                    (
                        "Vulnerable Code not in Execute Path",
                        "Vuln Code Not In Execute Path",
                    ),
                    ("Vulnerable Code not Present", "Vuln Code Not Present"),
                ],
                max_length=100,
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tracker",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_trackeraudit" ("acl_read", "acl_write", "bz_download_manager_id", "bz_link_manager_id", "created_dt", "external_system_id", "jira_download_manager_id", "jira_link_manager_id", "last_impact_increase_dt", "last_validated_dt", "not_affected_justification", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_update_stream", "resolution", "status", "type", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."bz_download_manager_id", NEW."bz_link_manager_id", NEW."created_dt", NEW."external_system_id", NEW."jira_download_manager_id", NEW."jira_link_manager_id", NEW."last_impact_increase_dt", NEW."last_validated_dt", NEW."not_affected_justification", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."ps_update_stream", NEW."resolution", NEW."status", NEW."type", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="3d49e5b3eb378013f3413df9583356fc9f11c65b", # pragma: allowlist secret
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_781c0",
                    table="osidb_tracker",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tracker",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."acl_read" IS DISTINCT FROM (NEW."acl_read") OR OLD."acl_write" IS DISTINCT FROM (NEW."acl_write") OR OLD."bz_download_manager_id" IS DISTINCT FROM (NEW."bz_download_manager_id") OR OLD."bz_link_manager_id" IS DISTINCT FROM (NEW."bz_link_manager_id") OR OLD."created_dt" IS DISTINCT FROM (NEW."created_dt") OR OLD."external_system_id" IS DISTINCT FROM (NEW."external_system_id") OR OLD."jira_download_manager_id" IS DISTINCT FROM (NEW."jira_download_manager_id") OR OLD."jira_link_manager_id" IS DISTINCT FROM (NEW."jira_link_manager_id") OR OLD."last_impact_increase_dt" IS DISTINCT FROM (NEW."last_impact_increase_dt") OR OLD."last_validated_dt" IS DISTINCT FROM (NEW."last_validated_dt") OR OLD."not_affected_justification" IS DISTINCT FROM (NEW."not_affected_justification") OR OLD."ps_update_stream" IS DISTINCT FROM (NEW."ps_update_stream") OR OLD."resolution" IS DISTINCT FROM (NEW."resolution") OR OLD."status" IS DISTINCT FROM (NEW."status") OR OLD."type" IS DISTINCT FROM (NEW."type") OR OLD."updated_dt" IS DISTINCT FROM (NEW."updated_dt") OR OLD."uuid" IS DISTINCT FROM (NEW."uuid"))',
                    func='INSERT INTO "osidb_trackeraudit" ("acl_read", "acl_write", "bz_download_manager_id", "bz_link_manager_id", "created_dt", "external_system_id", "jira_download_manager_id", "jira_link_manager_id", "last_impact_increase_dt", "last_validated_dt", "not_affected_justification", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_update_stream", "resolution", "status", "type", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."bz_download_manager_id", NEW."bz_link_manager_id", NEW."created_dt", NEW."external_system_id", NEW."jira_download_manager_id", NEW."jira_link_manager_id", NEW."last_impact_increase_dt", NEW."last_validated_dt", NEW."not_affected_justification", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."ps_update_stream", NEW."resolution", NEW."status", NEW."type", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="98bab88f6b140789a1820b811d76f1690aa74dac", # pragma: allowlist secret
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_4b400",
                    table="osidb_tracker",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tracker",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_trackeraudit" ("acl_read", "acl_write", "bz_download_manager_id", "bz_link_manager_id", "created_dt", "external_system_id", "jira_download_manager_id", "jira_link_manager_id", "last_impact_increase_dt", "last_validated_dt", "not_affected_justification", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_update_stream", "resolution", "status", "type", "updated_dt", "uuid") VALUES (OLD."acl_read", OLD."acl_write", OLD."bz_download_manager_id", OLD."bz_link_manager_id", OLD."created_dt", OLD."external_system_id", OLD."jira_download_manager_id", OLD."jira_link_manager_id", OLD."last_impact_increase_dt", OLD."last_validated_dt", OLD."not_affected_justification", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."ps_update_stream", OLD."resolution", OLD."status", OLD."type", OLD."updated_dt", OLD."uuid"); RETURN NULL;',
                    hash="e70c0923b4d6b64d00a596ec1ed700e7ce3ed9e6", # pragma: allowlist secret
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_d12e8",
                    table="osidb_tracker",
                    when="AFTER",
                ),
            ),
        ),
    ]
