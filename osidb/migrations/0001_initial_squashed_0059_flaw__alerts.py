# Generated by Django 3.2.15 on 2022-09-20 14:44

import django.contrib.postgres.fields
import django.contrib.postgres.operations
from django.db import migrations, models
import django.db.models.deletion
import osidb.validators
import psqlextra.fields.hstore_field
import uuid


class Migration(migrations.Migration):

    replaces = [
        ("osidb", "0001_initial"),
        ("osidb", "0002_rename_attr_to_meta_attr"),
        ("osidb", "0003_auto_20211019_0839"),
        ("osidb", "0004_add_package_versions"),
        ("osidb", "0005_auto_20211021_0931"),
        ("osidb", "0006_auto_20211021_1343"),
        ("osidb", "0007_auto_20211026_0617"),
        ("osidb", "0008_auto_20211027_1242"),
        ("osidb", "0009_flaw_workflow_attributes"),
        ("osidb", "0010_auto_20211127_1652"),
        ("osidb", "0011_alter_flawmeta_unique_together"),
        ("osidb", "0012_auto_20211129_0643"),
        ("osidb", "0013_rename_acks"),
        ("osidb", "0014_auto_20211201_1101"),
        ("osidb", "0015_auto_20211201_2027"),
        ("osidb", "0016_auto_20211201_2157"),
        ("osidb", "0017_affect_state_to_affectedness"),
        ("osidb", "0018_add_tracker_status_resolution"),
        ("osidb", "0019_clean_affect_model"),
        ("osidb", "0020_fix_notaffected"),
        ("osidb", "0021_auto_20211206_0957"),
        ("osidb", "0022_tracker_status_resolution_blank"),
        ("osidb", "0023_csaw_to_major_incident"),
        ("osidb", "0024_extend_workflow_name_length"),
        ("osidb", "0025_tracker_ps_update_stream"),
        ("osidb", "0026_trackers_many_affects"),
        ("osidb", "0027_remove_embargoed_attribute"),
        ("osidb", "0028_flaw_osidb_flaw_cve_id_dd22ae_idx"),
        ("osidb", "0029_pscontact_psproduct_psmodule_psupdatestream"),
        ("osidb", "0030_correct_created_updated_dt"),
        ("osidb", "0031_correct_created_updated_dt_affects_trackers"),
        ("osidb", "0032_profile"),
        ("osidb", "0033_fix_source_typos"),
        ("osidb", "0034_remove_affect_cve_id"),
        ("osidb", "0035_alter_tracker_affects"),
        ("osidb", "0036_rls"),
        ("osidb", "0037_erratum_erratumevent"),
        ("osidb", "0038_alter_flaw_unique_together"),
        ("osidb", "0039_flaw_cve_id_allow_blank"),
        ("osidb", "0040_flawcomment_text"),
        ("osidb", "0041_fix_buzilla_state_values"),
        ("osidb", "0042_dt_no_auto"),
        ("osidb", "0043_data_migrations"),
        ("osidb", "0044_flaw_required_fields_revision"),
        ("osidb", "0045_flaw_history_required_fields_revision"),
        ("osidb", "0046_affect_required_fields_revision"),
        ("osidb", "0047_tracker_required_fields_revision"),
        ("osidb", "0048_workflow_model_required_fields_revision"),
        ("osidb", "0049_misc_models_required_fields_revision"),
        ("osidb", "0050_add_sources"),
        ("osidb", "0051_stable_ordering"),
        ("osidb", "0052_dt_data_migration"),
        ("osidb", "0053_remove_tracking_mixin_from_flawhistory"),
        ("osidb", "0054_unify_created_updated_dt"),
        ("osidb", "0055_text_choices_migration"),
        ("osidb", "0056_remove_packageversions_acls"),
        ("osidb", "0057_remove_pghistory_event_tables"),
        ("osidb", "0058_affect__alerts"),
        ("osidb", "0059_flaw__alerts"),
    ]

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        django.contrib.postgres.operations.HStoreExtension(),
        ###############
        # BASE MODELS #
        ###############
        migrations.CreateModel(
            name="Flaw",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "cve_id",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        unique=True,
                        validators=[osidb.validators.validate_cve_id],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("VULNERABILITY", "Vulnerability"),
                            ("WEAKNESS", "Weakness"),
                        ],
                        default="VULNERABILITY",
                        max_length=20,
                    ),
                ),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("ASSIGNED", "Assigned"),
                            ("CLOSED", "Closed"),
                            ("MODIFIED", "Modified"),
                            ("NEW", "New"),
                            ("ON_DEV", "On Dev"),
                            ("ON_QA", "On Qa"),
                            ("POST", "Post"),
                            ("RELEASE_PENDING", "Release Pending"),
                            ("VERIFIED", "Verified"),
                        ],
                        default="NEW",
                        max_length=100,
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "Novalue"),
                            ("DUPLICATE", "Duplicate"),
                            ("WONTFIX", "Wontfix"),
                            ("NOTABUG", "Notabug"),
                            ("ERRATA", "Errata"),
                            ("CANTFIX", "Cantfix"),
                            ("DEFERRED", "Deferred"),
                            ("CURRENTRELEASE", "Currentrelease"),
                            ("UPSTREAM", "Upstream"),
                            ("RAWHIDE", "Rawhide"),
                            ("INSUFFICIENT_DATA", "Insufficient Data"),
                            ("NEXTRELEASE", "Nextrelease"),
                            ("WORKSFORME", "Worksforme"),
                            ("EOL", "Eol"),
                        ],
                        default="",
                        max_length=100,
                    ),
                ),
                (
                    "impact",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "Novalue"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("IMPORTANT", "Important"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.TextField()),
                ("description", models.TextField()),
                ("summary", models.TextField(blank=True)),
                ("statement", models.TextField(blank=True)),
                (
                    "mitigated_by",
                    models.CharField(
                        blank=True,
                        choices=[("SELINUX", "Selinux"), ("FORTIFY", "Fortify")],
                        max_length=10,
                    ),
                ),
                (
                    "cwe_id",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        validators=[osidb.validators.validate_cwe_id],
                    ),
                ),
                ("unembargo_dt", models.DateTimeField(blank=True, null=True)),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ADOBE", "Adobe"),
                            ("APPLE", "Apple"),
                            ("ASF", "Asf"),
                            ("BIND", "Bind"),
                            ("BK", "Bk"),
                            ("BUGTRAQ", "Bugtraq"),
                            ("BUGZILLA", "Bugzilla"),
                            ("CERT", "Cert"),
                            ("CERTIFI", "Certfi"),
                            ("CORELABS", "Corelabs"),
                            ("CUSTOMER", "Customer"),
                            ("CVE", "Cve"),
                            ("DAILYDAVE", "Dailydave"),
                            ("DEBIAN", "Debian"),
                            ("DISTROS", "Distros"),
                            ("FEDORA", "Fedora"),
                            ("FETCHMAIL", "Fetchmail"),
                            ("FREEDESKTOP", "Freedesktop"),
                            ("FREERADIUS", "Freeradius"),
                            ("FRSIRT", "Frsirt"),
                            ("FULLDISCLOSURE", "Full Disclosure"),
                            ("GAIM", "Gaim"),
                            ("GENTOO", "Gentoo"),
                            ("GENTOOBZ", "Gentoobz"),
                            ("GIT", "Git"),
                            ("GNOME", "Gnome"),
                            ("GNUPG", "Gnupg"),
                            ("GOOGLE", "Google"),
                            ("HP", "Hp"),
                            ("HW_VENDOR", "Hw Vendor"),
                            ("IBM", "Ibm"),
                            ("IDEFENSE", "Idefense"),
                            ("INTERNET", "Internet"),
                            ("ISC", "Isc"),
                            ("ISEC", "Isec"),
                            ("IT", "It"),
                            ("JBOSS", "Jboss"),
                            ("JPCERT", "Jpcert"),
                            ("KERNELBUGZILLA", "Kernelbugzilla"),
                            ("KERNELSEC", "Kernelsec"),
                            ("LKML", "Lkml"),
                            ("LWN", "Lwn"),
                            ("MACROMEDIA", "Macromedia"),
                            ("MAGEIA", "Mageia"),
                            ("MAILINGLIST", "Mailinglist"),
                            ("MILW0RM", "Milw0Rm"),
                            ("MIT", "Mit"),
                            ("MITRE", "Mitre"),
                            ("MOZILLA", "Mozilla"),
                            ("MUTTDEV", "Muttdev"),
                            ("NETDEV", "Netdev"),
                            ("NISCC", "Niscc"),
                            ("", "Novalue"),
                            ("OCERT", "Ocert"),
                            ("OPENOFFICE", "Openoffice"),
                            ("OPENSSL", "Openssl"),
                            ("OPENSUSE", "Opensuse"),
                            ("ORACLE", "Oracle"),
                            ("OSS", "Oss"),
                            ("OSSSECURITY", "Oss Security"),
                            ("PHP", "Php"),
                            ("PIDGIN", "Pidgin"),
                            ("POSTGRESQL", "Postgresql"),
                            ("PRESS", "Press"),
                            ("REAL", "Real"),
                            ("REDHAT", "Redhat"),
                            ("RESEARCHER", "Researcher"),
                            ("RT", "Rt"),
                            ("SAMBA", "Samba"),
                            ("SECALERT", "Secalert"),
                            ("SECUNIA", "Secunia"),
                            ("SECURITYFOCUS", "Securityfocus"),
                            ("SKO", "Sko"),
                            ("SQUID", "Squid"),
                            ("SQUIRRELMAIL", "Squirrelmail"),
                            ("SUN", "Sun"),
                            ("SUNSOLVE", "Sunsolve"),
                            ("SUSE", "Suse"),
                            ("TWITTER", "Twitter"),
                            ("UBUNTU", "Ubuntu"),
                            ("UPSTREAM", "Upstream"),
                            ("VENDORSEC", "Vendor Sec"),
                            ("VULNWATCH", "Vulnwatch"),
                            ("WIRESHARK", "Wireshark"),
                            ("XCHAT", "Xchat"),
                            ("XEN", "Xen"),
                            ("XPDF", "Xpdf"),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "reported_dt",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[osidb.validators.no_future_date],
                    ),
                ),
                (
                    "cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                ("cvss2_score", models.FloatField(blank=True, null=True)),
                (
                    "cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                ("cvss3_score", models.FloatField(blank=True, null=True)),
                (
                    "meta_attr",
                    psqlextra.fields.hstore_field.HStoreField(default=dict),
                ),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "osim_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DRAFT", "Draft"),
                            ("NEW", "New"),
                            ("ANALYSIS", "Analysis"),
                            ("REVIEW", "Review"),
                            ("FIX", "Fix"),
                            ("DONE", "Done"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "osim_workflow",
                    models.CharField(blank=True, max_length=50),
                ),
                (
                    "nvd_cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                (
                    "nvd_cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                (
                    "is_major_incident",
                    models.BooleanField(default=False),
                ),
                (
                    "_alerts",
                    models.JSONField(blank=True, default=dict),
                ),
            ],
            options={"ordering": ("created_dt", "uuid"), "verbose_name": "Flaw"},
        ),
        migrations.AddIndex(
            model_name="flaw",
            index=models.Index(
                fields=["-updated_dt"], name="osidb_flaw_updated_090116_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="flaw",
            index=models.Index(fields=["-cve_id"], name="osidb_flaw_cve_id_dd22ae_idx"),
        ),
        migrations.CreateModel(
            name="FlawMeta",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ERRATA", "Errata"),
                            ("REFERENCE", "Reference"),
                            ("ACKNOWLEDGMENT", "Acknowledgment"),
                            ("EXPLOIT", "Exploit"),
                            ("MAJOR_INCIDENT", "Major Incident"),
                            ("MAJOR_INCIDENT_LITE", "Major Incident Lite"),
                            ("REQUIRES_DOC_TEXT", "Requires Doc Text"),
                            ("NIST_CVSS_VALIDATION", "Nist Cvss Validation"),
                            ("NEED_INFO", "Need Info"),
                            ("CHECKLIST", "Checklist"),
                            ("NVD_CVSS", "Nvd Cvss"),
                        ],
                        max_length=500,
                    ),
                ),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                ("meta_attr", psqlextra.fields.hstore_field.HStoreField(default=dict)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "flaw",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meta",
                        to="osidb.flaw",
                    ),
                ),
            ],
            options={"verbose_name": "FlawMeta"},
        ),
        migrations.CreateModel(
            name="FlawComment",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("BUGZILLA", "Bugzilla")],
                        default="BUGZILLA",
                        max_length=100,
                    ),
                ),
                (
                    "text",
                    models.TextField(),
                ),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                ("external_system_id", models.CharField(max_length=100)),
                ("order", models.IntegerField(null=True)),
                ("meta_attr", psqlextra.fields.hstore_field.HStoreField(default=dict)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "flaw",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="osidb.flaw",
                    ),
                ),
            ],
            options={
                "ordering": ("order", "external_system_id", "created_dt"),
            },
        ),
        migrations.CreateModel(
            name="FlawHistory",
            fields=[
                ("pgh_created_at", models.DateTimeField(null=True)),
                ("pgh_label", models.CharField(max_length=100, null=True)),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("cve_id", models.CharField(blank=True, max_length=500)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("VULNERABILITY", "Vulnerability"),
                            ("WEAKNESS", "Weakness"),
                        ],
                        default="VULNERABILITY",
                        max_length=20,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("ASSIGNED", "Assigned"),
                            ("CLOSED", "Closed"),
                            ("MODIFIED", "Modified"),
                            ("NEW", "New"),
                            ("ON_DEV", "On Dev"),
                            ("ON_QA", "On Qa"),
                            ("POST", "Post"),
                            ("RELEASE_PENDING", "Release Pending"),
                            ("VERIFIED", "Verified"),
                        ],
                        default="NEW",
                        max_length=100,
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "Novalue"),
                            ("DUPLICATE", "Duplicate"),
                            ("WONTFIX", "Wontfix"),
                            ("NOTABUG", "Notabug"),
                            ("ERRATA", "Errata"),
                            ("CANTFIX", "Cantfix"),
                            ("DEFERRED", "Deferred"),
                            ("CURRENTRELEASE", "Currentrelease"),
                            ("UPSTREAM", "Upstream"),
                            ("RAWHIDE", "Rawhide"),
                            ("INSUFFICIENT_DATA", "Insufficient Data"),
                            ("NEXTRELEASE", "Nextrelease"),
                            ("WORKSFORME", "Worksforme"),
                            ("EOL", "Eol"),
                        ],
                        default="",
                        max_length=100,
                    ),
                ),
                (
                    "impact",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "Novalue"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("IMPORTANT", "Important"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.TextField()),
                ("description", models.TextField()),
                ("summary", models.TextField(blank=True)),
                ("statement", models.TextField(blank=True)),
                (
                    "mitigated_by",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SELINUX", "Selinux"),
                            ("FORTIFY", "Fortify"),
                            ("GRSEC", "Grsec"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "cwe_id",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        validators=[osidb.validators.validate_cwe_id],
                    ),
                ),
                ("unembargo_dt", models.DateTimeField(blank=True, null=True)),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ADOBE", "Adobe"),
                            ("APPLE", "Apple"),
                            ("ASF", "Asf"),
                            ("BIND", "Bind"),
                            ("BK", "Bk"),
                            ("BUGTRAQ", "Bugtraq"),
                            ("BUGZILLA", "Bugzilla"),
                            ("CERT", "Cert"),
                            ("CERTIFI", "Certfi"),
                            ("CORELABS", "Corelabs"),
                            ("CUSTOMER", "Customer"),
                            ("CVE", "Cve"),
                            ("DAILYDAVE", "Dailydave"),
                            ("DEBIAN", "Debian"),
                            ("DISTROS", "Distros"),
                            ("FEDORA", "Fedora"),
                            ("FETCHMAIL", "Fetchmail"),
                            ("FREEDESKTOP", "Freedesktop"),
                            ("FREERADIUS", "Freeradius"),
                            ("FRSIRT", "Frsirt"),
                            ("FULLDISCLOSURE", "Full Disclosure"),
                            ("GAIM", "Gaim"),
                            ("GENTOO", "Gentoo"),
                            ("GENTOOBZ", "Gentoobz"),
                            ("GIT", "Git"),
                            ("GNOME", "Gnome"),
                            ("GNUPG", "Gnupg"),
                            ("GOOGLE", "Google"),
                            ("HP", "Hp"),
                            ("HW_VENDOR", "Hw Vendor"),
                            ("IBM", "Ibm"),
                            ("IDEFENSE", "Idefense"),
                            ("INTERNET", "Internet"),
                            ("ISC", "Isc"),
                            ("ISEC", "Isec"),
                            ("IT", "It"),
                            ("JBOSS", "Jboss"),
                            ("JPCERT", "Jpcert"),
                            ("KERNELBUGZILLA", "Kernelbugzilla"),
                            ("KERNELSEC", "Kernelsec"),
                            ("LKML", "Lkml"),
                            ("LWN", "Lwn"),
                            ("MACROMEDIA", "Macromedia"),
                            ("MAGEIA", "Mageia"),
                            ("MAILINGLIST", "Mailinglist"),
                            ("MILW0RM", "Milw0Rm"),
                            ("MIT", "Mit"),
                            ("MITRE", "Mitre"),
                            ("MOZILLA", "Mozilla"),
                            ("MUTTDEV", "Muttdev"),
                            ("NETDEV", "Netdev"),
                            ("NISCC", "Niscc"),
                            ("", "Novalue"),
                            ("OCERT", "Ocert"),
                            ("OPENOFFICE", "Openoffice"),
                            ("OPENSSL", "Openssl"),
                            ("OPENSUSE", "Opensuse"),
                            ("ORACLE", "Oracle"),
                            ("OSS", "Oss"),
                            ("OSSSECURITY", "Oss Security"),
                            ("PHP", "Php"),
                            ("PIDGIN", "Pidgin"),
                            ("POSTGRESQL", "Postgresql"),
                            ("PRESS", "Press"),
                            ("REAL", "Real"),
                            ("REDHAT", "Redhat"),
                            ("RESEARCHER", "Researcher"),
                            ("RT", "Rt"),
                            ("SAMBA", "Samba"),
                            ("SECALERT", "Secalert"),
                            ("SECUNIA", "Secunia"),
                            ("SECURITYFOCUS", "Securityfocus"),
                            ("SKO", "Sko"),
                            ("SQUID", "Squid"),
                            ("SQUIRRELMAIL", "Squirrelmail"),
                            ("SUN", "Sun"),
                            ("SUNSOLVE", "Sunsolve"),
                            ("SUSE", "Suse"),
                            ("TWITTER", "Twitter"),
                            ("UBUNTU", "Ubuntu"),
                            ("UPSTREAM", "Upstream"),
                            ("VENDORSEC", "Vendor Sec"),
                            ("VULNWATCH", "Vulnwatch"),
                            ("WIRESHARK", "Wireshark"),
                            ("XCHAT", "Xchat"),
                            ("XEN", "Xen"),
                            ("XPDF", "Xpdf"),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "reported_dt",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[osidb.validators.no_future_date],
                    ),
                ),
                (
                    "cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                ("cvss2_score", models.FloatField(blank=True, null=True)),
                (
                    "cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                ("cvss3_score", models.FloatField(blank=True, null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                ("meta_attr", psqlextra.fields.hstore_field.HStoreField(default=dict)),
                (
                    "is_major_incident",
                    models.BooleanField(default=False),
                ),
            ],
            options={"verbose_name": "FlawHistory"},
        ),
        migrations.CreateModel(
            name="Affect",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("DEFAULT", "Default")],
                        default="DEFAULT",
                        max_length=10,
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "Novalue"),
                            ("FIX", "Fix"),
                            ("DEFER", "Defer"),
                            ("WONTFIX", "Wontfix"),
                            ("OOSS", "Ooss"),
                            ("DELEGATED", "Delegated"),
                            ("WONTREPORT", "Wontreport"),
                        ],
                        default="",
                        max_length=100,
                    ),
                ),
                ("ps_module", models.CharField(max_length=100)),
                ("ps_component", models.CharField(max_length=100)),
                (
                    "impact",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "Novalue"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("IMPORTANT", "Important"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                ("cvss2_score", models.FloatField(blank=True, null=True)),
                (
                    "cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                ("cvss3_score", models.FloatField(blank=True, null=True)),
                (
                    "meta_attr",
                    psqlextra.fields.hstore_field.HStoreField(default=dict),
                ),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "flaw",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affects",
                        to="osidb.flaw",
                    ),
                ),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "affectedness",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "No value"),
                            ("NEW", "Unknown"),
                            ("AFFECTED", "Affected"),
                            ("NOTAFFECTED", "Not affected"),
                        ],
                        default="NEW",
                        max_length=100,
                    ),
                ),
                (
                    "_alerts",
                    models.JSONField(blank=True, default=dict),
                ),
            ],
            options={
                "ordering": ("created_dt", "uuid"),
                "unique_together": {("flaw", "ps_module", "ps_component")},
                "verbose_name": "Affect",
            },
        ),
        migrations.AddIndex(
            model_name="affect",
            index=models.Index(
                fields=["-updated_dt"], name="osidb_affec_updated_0b1a47_idx"
            ),
        ),
        migrations.CreateModel(
            name="Tracker",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("JIRA", "Jira"),
                            ("BUGZILLA", "Bugzilla"),
                        ],
                        max_length=100,
                    ),
                ),
                ("external_system_id", models.CharField(max_length=100)),
                (
                    "meta_attr",
                    psqlextra.fields.hstore_field.HStoreField(default=dict),
                ),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "resolution",
                    models.CharField(blank=True, max_length=100),
                ),
                ("status", models.CharField(max_length=100)),
                (
                    "ps_update_stream",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "affects",
                    models.ManyToManyField(
                        blank=True, related_name="trackers", to="osidb.Affect"
                    ),
                ),
            ],
            options={
                "ordering": ("created_dt", "uuid"),
                "unique_together": {("type", "external_system_id")},
                "verbose_name": "Tracker",
            },
        ),
        migrations.AddIndex(
            model_name="tracker",
            index=models.Index(
                fields=["-updated_dt"], name="osidb_track_updated_6f27c1_idx"
            ),
        ),
        migrations.CreateModel(
            name="Erratum",
            fields=[
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("et_id", models.IntegerField(unique=True)),
                ("advisory_name", models.CharField(max_length=20, unique=True)),
                (
                    "trackers",
                    models.ManyToManyField(related_name="errata", to="osidb.Tracker"),
                ),
            ],
            options={
                "verbose_name": "Erratum",
                "verbose_name_plural": "Errata",
            },
        ),
        #######################
        # PRODUCT DEFINITIONS #
        #######################
        migrations.CreateModel(
            name="PsContact",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("username", models.CharField(max_length=100, unique=True)),
                ("bz_username", models.CharField(max_length=100)),
                ("jboss_username", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="PsProduct",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("short_name", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("team", models.CharField(max_length=50)),
                ("business_unit", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="PsModule",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("public_description", models.TextField()),
                (
                    "cpe",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("private_trackers_allowed", models.BooleanField(default=False)),
                ("autofile_trackers", models.BooleanField(default=False)),
                (
                    "special_handling_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("bts_name", models.CharField(max_length=50)),
                ("bts_key", models.CharField(max_length=100)),
                ("bts_groups", models.JSONField(default=dict)),
                ("supported_from_dt", models.DateTimeField(blank=True, null=True)),
                ("supported_until_dt", models.DateTimeField(blank=True, null=True)),
                (
                    "default_cc",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "private_tracker_cc",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("component_cc", models.JSONField(blank=True, default=dict)),
                ("default_component", models.CharField(blank=True, max_length=100)),
                ("component_overrides", models.JSONField(blank=True, default=dict)),
                (
                    "unacked_ps_update_stream",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "ps_product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ps_modules",
                        to="osidb.psproduct",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PsUpdateStream",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("version", models.CharField(blank=True, max_length=50)),
                (
                    "target_release",
                    models.CharField(blank=True, max_length=50),
                ),
                ("rhsa_sla_applicable", models.BooleanField(default=True)),
                ("additional_fields", models.JSONField(blank=True, default=dict)),
                (
                    "collections",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "flags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "active_to_ps_module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="active_ps_update_streams",
                        to="osidb.psmodule",
                    ),
                ),
                (
                    "aus_to_ps_module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="aus_ps_update_streams",
                        to="osidb.psmodule",
                    ),
                ),
                (
                    "default_to_ps_module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="default_ps_update_streams",
                        to="osidb.psmodule",
                    ),
                ),
                (
                    "eus_to_ps_module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="eus_ps_update_streams",
                        to="osidb.psmodule",
                    ),
                ),
                (
                    "ps_module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ps_update_streams",
                        to="osidb.psmodule",
                    ),
                ),
            ],
        ),
        ####################
        # PACKAGE VERSIONS #
        ####################
        migrations.CreateModel(
            name="Version",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_osidb.version_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Version",
            },
        ),
        migrations.CreateModel(
            name="PackageVersions",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "flaw",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="package_versions",
                        to="osidb.flaw",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_osidb.packageversions_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "versions",
                    models.ManyToManyField(to="osidb.Version"),
                ),
            ],
            options={
                "verbose_name": "Package Versions",
            },
        ),
        migrations.CreateModel(
            name="CVEv5PackageVersions",
            fields=[
                (
                    "packageversions_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="osidb.packageversions",
                    ),
                ),
                ("package", models.CharField(max_length=2058)),
                (
                    "default_status",
                    models.CharField(
                        choices=[
                            ("AFFECTED", "Affected"),
                            ("UNAFFECTED", "Unaffected"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        default="UNAFFECTED",
                        max_length=1024,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("osidb.packageversions",),
        ),
        migrations.CreateModel(
            name="CVEv5Version",
            fields=[
                (
                    "version_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="osidb.version",
                    ),
                ),
                ("version", models.CharField(max_length=1024)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AFFECTED", "Affected"),
                            ("UNAFFECTED", "Unaffected"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        max_length=20,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("osidb.version",),
        ),
        ###########
        # PROFILE #
        ###########
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="profile",
                        serialize=False,
                        to="auth.user",
                    ),
                ),
                (
                    "bz_user_id",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "jira_user_id",
                    models.CharField(blank=True, max_length=100),
                ),
            ],
        ),
        ######################
        # ROW LEVEL SECURITY #
        ######################
        migrations.RunSQL(
            reverse_sql=migrations.RunSQL.noop,
            sql="""
--enable row based security for following tables
ALTER TABLE osidb_flaw ENABLE ROW LEVEL SECURITY;
ALTER TABLE osidb_flaw FORCE ROW LEVEL SECURITY;
--set default value for osidb.acl parameter
SET osidb.acl TO '';
--following policies define fine grained read/write control on osidb_flaw entity
--policy for entity insert (eg. create)
DROP policy if exists acl_policy_flaw_create on osidb_flaw;
create policy acl_policy_flaw_create
on osidb_flaw
for INSERT
WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
     AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
-- Check that read / write ACLs of record to be inserted match ACL of current user
--policy for entity select
DROP policy if exists acl_policy_flaw_select on osidb_flaw;
create policy acl_policy_flaw_select
on osidb_flaw
for select
USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
-- Select only records with ACL that matches ACL of current user
--policy for entity update
DROP policy if exists acl_policy_flaw_update on osidb_flaw;
create policy acl_policy_flaw_update
on osidb_flaw
for update
USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
     AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
--policy for entity delete
DROP policy if exists acl_policy_flaw_delete on osidb_flaw;
create policy acl_policy_flaw_delete
on osidb_flaw
for delete
USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

--enable row based security for affects entity table
ALTER TABLE osidb_affect ENABLE ROW LEVEL SECURITY;
ALTER TABLE osidb_affect FORCE ROW LEVEL SECURITY;
--following policies define fine grained read/write control on osidb_affect entity
--policy for entity insert (eg. create)
DROP policy if exists acl_policy_affect_create on osidb_affect;
create policy acl_policy_affect_create
on osidb_affect
for INSERT
WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
     AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
--policy for entity select
DROP policy if exists acl_policy_affect_select on osidb_affect;
create policy acl_policy_affect_select
on osidb_affect
for select
USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
--policy for entity update
DROP policy if exists acl_policy_affect_update on osidb_affect;
create policy acl_policy_affect_update
on osidb_affect
for update
USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
     AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
--policy for entity delete
DROP policy if exists acl_policy_affect_delete on osidb_affect;
create policy acl_policy_affect_delete
on osidb_affect
for delete
USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

--enable row based security for flawmeta entity table
ALTER TABLE osidb_flawmeta ENABLE ROW LEVEL SECURITY;
ALTER TABLE osidb_flawmeta FORCE ROW LEVEL SECURITY;
--following policies define fine grained read/write control on osidb_flawmeta entity
--policy for entity insert (eg. create)
DROP policy if exists acl_policy_meta_create on osidb_flawmeta;
create policy acl_policy_meta_create
on osidb_flawmeta
for INSERT
WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
     AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
--policy for entity select
DROP policy if exists acl_policy_meta_select on osidb_flawmeta;
create policy acl_policy_meta_select
on osidb_flawmeta
for select
USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
--policy for entity update
DROP policy if exists acl_policy_meta_update on osidb_flawmeta;
create policy acl_policy_meta_update
on osidb_flawmeta
for update
USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
     AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
--policy for entity delete
DROP policy if exists acl_policy_meta_delete on osidb_flawmeta;
create policy acl_policy_meta_delete
on osidb_flawmeta
for delete
USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

--enable row based security for tracker entity table
ALTER TABLE osidb_tracker ENABLE ROW LEVEL SECURITY;
ALTER TABLE osidb_tracker FORCE ROW LEVEL SECURITY;
--following policies define fine grained read/write control on osidb_tracker entity
--policy for entity insert (eg. create)
DROP policy if exists acl_policy_tracker_create on osidb_tracker;
create policy acl_policy_tracker_create
on osidb_tracker
for INSERT
WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
     AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
--policy for entity select
DROP policy if exists acl_policy_tracker_select on osidb_tracker;
create policy acl_policy_tracker_select
on osidb_tracker
for select
USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
--policy for entity update
DROP policy if exists acl_policy_tracker_update on osidb_tracker;
create policy acl_policy_tracker_update
on osidb_tracker
for update
USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
     AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
--policy for entity delete
DROP policy if exists acl_policy_tracker_delete on osidb_tracker;
create policy acl_policy_tracker_delete
on osidb_tracker
for delete
USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
""",
        ),
    ]
