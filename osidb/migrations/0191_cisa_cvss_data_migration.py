# Generated by Django 4.2.20 on 2025-05-14 11:12

from celery.utils.log import logging
from django.apps.registry import Apps
from django.db import migrations, transaction
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from pghistory.runtime import json

from collectors.cveorg.collectors import CVEorgCollector, CVEorgCollectorException
from osidb.helpers import bypass_rls


_logger = logging.getLogger(__name__)


@bypass_rls
def upgrade(apps: Apps, schema_editor: BaseDatabaseSchemaEditor):
    Flaw = apps.get_model("osidb", "Flaw")

    if Flaw.objects.count() == 0:
        # prevent cloning the repo unnecessarily
        return

    collector = CVEorgCollector()
    # clone repo to assert that it at least exists, but do not update it --
    # if there's another update process running at the same time there's a risk
    # that the repository will be left in a unclean state and result in any
    # further runs to fail, instead assume that it was updated by a previous
    # celery job
    collector.clone_repo()

    for cve_id in (
        Flaw.objects.exclude(cve_id__isnull=True)
        .exclude(cve_id__exact="")
        .values_list("cve_id", flat=True)
        .iterator()
    ):
        try:
            fp = collector.get_cve_file_path(cve_id)
        except CVEorgCollectorException as exc:
            _logger.warning(f"Could not get filepath for {cve_id}", exc_info=exc)
            continue

        with open(fp) as f:
            raw_content = json.load(f)

        try:
            content = collector.extract_content(raw_content)
        except Exception as exc:
            _logger.warning(f"Failed to extract content for {cve_id}", exc_info=exc)
            continue

        try:
            with transaction.atomic():
                collector.upsert_cvss_scores(cve_id, content["cvss_scores"])
        except Exception as exc:
            _logger.warning(f"Failed to Upsert CVSS scores for {cve_id}", exc_info=exc)


@bypass_rls
def downgrade(apps: Apps, schema_editor: BaseDatabaseSchemaEditor):
    FlawCVSS = apps.get_model("osidb", "FlawCVSS")
    FlawCVSS.objects.filter(issuer="CISA").update(issuer="CVEORG")


class Migration(migrations.Migration):

    dependencies = [
        ("osidb", "0190_alter_affectcvss_issuer_alter_affectcvssaudit_issuer_and_more"),
    ]

    operations = [
        migrations.RunPython(upgrade, reverse_code=downgrade),
    ]
