# Generated by Django 4.2.22 on 2025-10-21 12:29

from django.conf import settings
from django.db import migrations

from osidb.core import set_user_acls


class Migration(migrations.Migration):

    dependencies = [
        ('osidb', '0207_alter_flawcomment_ordering_and_constraint'),
    ]

    operations = [
        migrations.RunPython(lambda apps, schema_editor: set_user_acls(settings.ALL_GROUPS), reverse_code=migrations.RunPython.noop),
        migrations.RunSQL(
            sql="""
            -- Update Affect objects to match their related Flaw's ACLs
            UPDATE osidb_affect
            SET acl_read = f.acl_read, acl_write = f.acl_write
            FROM osidb_flaw f
            WHERE osidb_affect.flaw_id = f.uuid
            AND (osidb_affect.acl_read != f.acl_read OR osidb_affect.acl_write != f.acl_write);

            -- Update FlawComment objects to match their related Flaw's ACLs
            UPDATE osidb_flawcomment
            SET acl_read = f.acl_read, acl_write = f.acl_write
            FROM osidb_flaw f
            WHERE osidb_flawcomment.flaw_id = f.uuid
            AND (osidb_flawcomment.acl_read != f.acl_read OR osidb_flawcomment.acl_write != f.acl_write);

            -- Update FlawReference objects to match their related Flaw's ACLs
            UPDATE osidb_flawreference
            SET acl_read = f.acl_read, acl_write = f.acl_write
            FROM osidb_flaw f
            WHERE osidb_flawreference.flaw_id = f.uuid
            AND (osidb_flawreference.acl_read != f.acl_read OR osidb_flawreference.acl_write != f.acl_write);

            -- Update FlawCVSS objects to match their related Flaw's ACLs
            UPDATE osidb_flawcvss
            SET acl_read = f.acl_read, acl_write = f.acl_write
            FROM osidb_flaw f
            WHERE osidb_flawcvss.flaw_id = f.uuid
            AND (osidb_flawcvss.acl_read != f.acl_read OR osidb_flawcvss.acl_write != f.acl_write);

            -- Update Package objects to match their related Flaw's ACLs
            UPDATE osidb_package
            SET acl_read = f.acl_read, acl_write = f.acl_write
            FROM osidb_flaw f
            WHERE osidb_package.flaw_id = f.uuid
            AND (osidb_package.acl_read != f.acl_read OR osidb_package.acl_write != f.acl_write);

            -- Update Snippet objects to match their related Flaw's ACLs
            UPDATE osidb_snippet
            SET acl_read = f.acl_read, acl_write = f.acl_write
            FROM osidb_flaw f
            WHERE osidb_snippet.flaw_id = f.uuid
            AND (osidb_snippet.acl_read != f.acl_read OR osidb_snippet.acl_write != f.acl_write);

            -- Update FlawAcknowledgment objects to match their related Flaw's ACLs
            UPDATE osidb_flawacknowledgment
            SET acl_read = f.acl_read, acl_write = f.acl_write
            FROM osidb_flaw f
            WHERE osidb_flawacknowledgment.flaw_id = f.uuid
            AND (osidb_flawacknowledgment.acl_read != f.acl_read OR osidb_flawacknowledgment.acl_write != f.acl_write);

            -- Update Tracker objects to match their related Affect's ACLs
            UPDATE osidb_tracker
            SET acl_read = a.acl_read, acl_write = a.acl_write
            FROM osidb_affect a
            WHERE osidb_tracker.uuid = a.tracker_id
            AND (osidb_tracker.acl_read != a.acl_read OR osidb_tracker.acl_write != a.acl_write);

            -- Update AffectCVSS objects to match their related Affect's ACLs
            UPDATE osidb_affectcvss
            SET acl_read = a.acl_read, acl_write = a.acl_write
            FROM osidb_affect a
            WHERE osidb_affectcvss.affect_id = a.uuid
            AND (osidb_affectcvss.acl_read != a.acl_read OR osidb_affectcvss.acl_write != a.acl_write);
            """,
            reverse_sql=migrations.RunSQL.noop
        ),
    ]
